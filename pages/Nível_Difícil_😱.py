import streamlit as st
import random

st.set_page_config(page_title='Quiz TEC', page_icon='üéØ')
st.sidebar.markdown('O objetivo deste jogo √© disseminar os conhecimentos ensinados na disciplina de Teoria da Computa√ß√£o, lecionada pela professora Dra. Karina Roggia, durante o semestre 2023/1 na Universidade do Estado de Santa Catarina (UDESC - CCT). Desenvolvido por Guilherme Tomaselli Borchardt.')
st.sidebar.write("---")

@st.cache_data(show_spinner=False, max_entries = 1)
def gerar_lista_aleatoria():

    lista = random.sample(range(0, 7), 5)
    
    return lista

perguntas = [
    "Quais das seguintes informa√ß√µes s√£o verdadeiras?\n1. O problema de determinar se existe um ciclo em um grafo direcionado pertence √† classe P.\n2. O problema de determinar se existe um ciclo em um grafo direcionado pertence √† classe NP.\n3. Se A ‚àà NP-Completo, ent√£o existe um algoritmo n√£o determin√≠stico que roda em tempo polinomial e decide A.",
    "Quais das seguintes linguagens s√£o indecid√≠veis?\n1. {<G> | G √© GLC e L(G) = √ò}\n2. {<G> | G √© GLC e L(G) = ‚àë*}\n3. {<M> | M √© MT e L(M) √© linguagem regular}\n 4. {<A, N> | A √© um AFD e N √© um AFN e L(A) = L(N)}",
    "Quais das seguintes alternativas s√£o falsas?\n1. Para qualquer M√°quina de Turing n√£o determin√≠stica, existe uma M√°quina de Turing determin√≠stica equivalente\n2. Linguagens reconhec√≠veis s√£o fechadas sobre as opera√ß√µes de uni√£o e complemento\n3. Linguagens decid√≠veis s√£o fechadas para as opera√ß√µes de intersec√ß√£o e complemento\n4. Linguagens reconhec√≠veis s√£o fechadas sobre as opera√ß√µes de uni√£o e intersec√ß√£o",
    "O que significa quando dizemos que um algoritmo P1 √© assintoticamente mais eficiente do que o algoritmo P2?",
    "A √© uma linguagem reconhec√≠vel se, e somente se, A ‚â§m Amt?",
    "Quais dos problemas a seguir s√£o decid√≠veis?\n1. Dado programa P, P sempre produz uma sa√≠da?\n2. Se L √© livre de contexto, ent√£o o complemento de L tamb√©m √© livre de contexto?\n3. Se L √© regular, ent√£o o complemento de L tamb√©m √© regular?\n4. Se L √© decid√≠vel, ent√£o o complemento de L tamb√©m √© decid√≠vel?",
    "Suponha que a linguagem X pertence √† classe NP-Completo, a linguagem Y pertence a P e X ‚â§p Y. Qual das alternativas √© a correta?"
]

respostas = [
    ["Todas", "Somente 1 e 3", "Somente 2 e 3", "Nenhuma"],
    ["Somente a n√∫mero 3", "Somente as de n√∫mero 3 e 4", "Somente as de n√∫mero 2 e 3", "Nenhuma"],
    ["Somente a n√∫mero 2", "Somente a n√∫mero 3", "Somente as de n√∫mero 1 e 4", "Nenhuma"],
    ["P1 sempre ser√° uma escolha melhor do que P2 para entradas pequenas", "P1 sempre ser√° uma escolha melhor do que P2 para entradas grandes", "P2 sempre ser√° uma escolha melhor do que P1 para entradas pequenas", "P1 sempre ser√° uma escolha melhor do que P2, independente do tamanho da entrada"],
    ["Verdadeiro", "Falso"], 
    ["2, 3 e 4", "1, 2, 3 e 4", "3 e 4", "1 e 2"],
    ["X pertence √† classe P", "Y pertence √† classe NP-Completo", "P = NP", "Todas as alternativas anteriores"]
]

alternativas = [0, 2, 0, 1, 0, 2, 3]

st.header('Bem Vindo ao N√≠vel Dif√≠cil üò±')

lista = gerar_lista_aleatoria()

acertos = 0

for i in lista:

    st.write("---")
    st.subheader(perguntas[i])
    resposta = st.radio("", respostas[i], label_visibility = 'hidden')

    verificar = st.button('Verificar', key=i)
    if(verificar):

        if respostas[i].index(resposta) == alternativas[i]:
            acertos += 1
            st.success('Boa! Essa voc√™ acertou.')
        else:
            st.error(f'Que pena, essa voc√™ errou. A {alternativas[i]+1}¬™ alternativa era a correta.')
