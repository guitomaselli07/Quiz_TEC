import streamlit as st
import random

st.set_page_config(page_title='Quiz TEC', page_icon='üéØ')
st.sidebar.markdown('O objetivo deste jogo √© promover os conhecimentos ensinados na disciplina de Teoria da Computa√ß√£o, lecionada pela professora Dra. Karina Rogia, durante o semestre 2023/1 na Universidade do Estado de Santa Catarina (UDESC - CCT). Desenvolvido por Guilherme Tomaselli Borchardt.')
st.sidebar.write("---")

@st.cache_data(show_spinner=False)
def gerar_lista_aleatoria():

    lista = random.sample(range(0, 7), 5)
    
    return lista

perguntas = [
    "Qual dos problemas a seguir n√£o √© um problema NP-Completo?",
    "A respeito dos crit√©rios de aceita√ß√£o, rejei√ß√£o e loop, qual √© a alternativa correta?",
    "Seja L1 uma linguagem decid√≠vel e sejam L2 e L3 linguagens reconhec√≠veis n√£o decid√≠veis. Qual das afirma√ß√µes a seguir n√£o √© necessariamente correta?",
    "Suponha que a linguagem X perten√ßa √† classe NP-Completo, a liguagem Y pertence √† classe NP e que X ‚â§ Y e Y ‚â§ X. Quais das alternativas a seguir est√° correta?",
    "Existem linguagens decid√≠veis que possuem M√°quina de Turing que eventualmente entre em loop?",
    "Se M √© uma M√°quina de Turing que entra em loop infinito para algumas entradas, ent√£o L(M) n√£o √© decid√≠vel?", 
    "Sobre o Problema da Parada, o que √© correto afirmar?"
]

respostas = [
    ["Problema do ciclo hamiltoniano", "Problema do clique em grafos", "Problema da Correspond√™ncia de Post", "Nenhum dos problemas a cima"],
    ["Uma M√°quina de Turing n√£o determin√≠stica n√£o entra em loop infinito", "Se um ramo da M√°quina de Turing n√£o determin√≠stica tiver comprimento infinito, ent√£o essa m√°quina entrou em loop infinito", "Uma M√°quina de Turing n√£o determin√≠stica para somente se todos os ramos de computa√ß√£o poss√≠veis para a entrada pararem", "Se uma M√°quina de Turing n√£o determin√≠stica que n√£o aceita a palavra de entrada, ent√£o ela rejeita"],
    ["L1 ‚à™ L2 √© reconhec√≠vel", "L1 - L3 √© reconhec√≠vel", "L2 - L1 √© reconhec√≠vel", "L2 ‚à© L1 √© reconhec√≠vel"],
    ["Y pertence √† classe P", "Y pertence √† classe NP-Completa", "Todas as alternativas anteriores", "Nenhuma das alternativas anteriores"],
    ["Verdadeiro", "Falso"], 
    ["Verdadeiro", "Falso "],
    ["O problema da parada √© decid√≠vel, o que significa que existe um algoritmo capaz de determinar se um programa ir√° parar ou n√£o em uma entrada espec√≠fica", "O problema da parada √© indecid√≠vel, o que significa que n√£o existe um algoritmo capaz de determinar se um programa ir√° parar ou n√£o em uma entrada espec√≠fica", "O problema da parada √© resolvido atrav√©s da aplica√ß√£o de t√©cnicas de otimiza√ß√£o, que podem encontrar uma solu√ß√£o √≥tima para qualquer programa", "O problema da parada s√≥ ocorre em programas com erros de sintaxe ou sem√¢ntica e pode ser corrigido atrav√©s de depura√ß√£o adequada"]
]

alternativas = [2, 2, 1, 1, 0, 1]

st.header('Bem Vindo ao N√≠vel M√©dio üò¨')

lista = gerar_lista_aleatoria()

acertos = 0

for i in lista:

    st.write("---")
    st.subheader(perguntas[i])
    resposta = st.radio("", respostas[i], label_visibility = 'hidden')

    verificar = st.button('Verificar', key=i)
    if(verificar):

        if respostas[i].index(resposta) == alternativas[i]:
            acertos += 1
            st.success('Boa! Essa voc√™ acertou.')
        else:
            st.error(f'Que pena, essa voc√™ errou. A {alternativas[i]+1}¬™ alternativa era a correta.')
